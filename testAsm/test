; ModuleID = 'Mine'
source_filename = "Mine"

@i = internal global i32 zeroinitializer, align 4

declare i32 @printf(i8*, ...)

define void @main() {
main:
  call void @progo(i32 10)
  %0 = alloca [4 x i8]
  store [4 x i8] c"%d\0A\00", [4 x i8]* %0
  %1 = bitcast [4 x i8]* %0 to i8*
  %i = load i32, i32* @i
  %2 = call i32 (i8*, ...) @printf(i8* %1, i32 %i)
  ret void
}

define i32 @go(i32 %a) {
go:
  %a2 = alloca i32
  %go1 = alloca i32
  store i32 %a, i32* %a2
  %a23 = load i32, i32* %a2
  %0 = icmp eq i32 %a23, 1
  br i1 %0, label %then, label %else8

then:                                             ; preds = %go
  %a25 = load i32, i32* %a2
  %1 = icmp eq i32 %a25, 2
  br i1 %1, label %then4, label %else

then4:                                            ; preds = %then
  store i32 1, i32* %go1
  br label %final

else:                                             ; preds = %then
  %a26 = load i32, i32* %a2
  %2 = sub i32 %a26, 1
  %3 = call i32 @go(i32 %2)
  %a27 = load i32, i32* %a2
  %4 = sub i32 %a27, 2
  %5 = call i32 @go(i32 %4)
  %6 = add i32 %3, %5
  store i32 %6, i32* %go1
  br label %final

final:                                            ; preds = %else, %then4
  br label %final

else8:                                            ; preds = %go
  %go19 = load i32, i32* %go1
  ret i32 %go19
}

define void @progo(i32 %a) {
progo:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %a12 = load i32, i32* %a1
  %0 = call i32 @go(i32 %a12)
  store i32 %0, i32* @i
  ret void
}
