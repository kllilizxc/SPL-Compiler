Terminals which are not used

   EQUEL
   LET
   IN
   WITH
   PACKED
   SET
   BREAK


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID SEMI routine DOT

    2 routine: routine_head routine_body

    3 routine_head: label_part const_part type_part var_part routine_part

    4 label_part: /* empty */

    5 const_part: /* empty */
    6           | CONST const_expr_list

    7 const_expr_list: const_expr
    8                | const_expr const_expr_list

    9 const_expr: ID EQUAL const_value SEMI

   10 const_value: INTEGER
   11            | REAL
   12            | CHAR
   13            | STRING
   14            | SYS_CON

   15 type_part: /* empty */
   16          | TYPE type_decl_list

   17 type_decl_list: type_definition
   18               | type_definition type_decl_list

   19 type_definition: ID EQUAL type_decl SEMI

   20 type_decl: simple_type_decl
   21          | array_type_decl
   22          | record_type_decl

   23 simple_type_decl: SYS_TYPE
   24                 | ID
   25                 | LP name_list RP
   26                 | literalExp DOTDOT literalExp
   27                 | MINUS literalExp DOTDOT literalExp
   28                 | MINUS literalExp DOTDOT MINUS literalExp
   29                 | ID DOTDOT ID

   30 array_type_decl: ARRAY LB simple_type_decl RB OF type_decl

   31 record_type_decl: RECORD field_decl_list END

   32 field_decl_list: field_decl
   33                | field_decl field_decl_list

   34 field_decl: name_list COLON type_decl SEMI

   35 name_list: names
   36          | names COMMA name_list

   37 names: ID

   38 var_part: /* empty */
   39         | VAR var_decl_list

   40 var_decl_list: var_decl
   41              | var_decl var_decl_list

   42 var_decl: name_list COLON type_decl SEMI

   43 routine_part: /* empty */
   44             | routine_decl_list

   45 routine_decl_list: function_decl
   46                  | procedure_decl
   47                  | function_decl routine_decl_list
   48                  | procedure_decl routine_decl_list

   49 function_decl: FUNCTION ID parameters COLON simple_type_decl SEMI routine SEMI

   50 procedure_decl: PROCEDURE ID parameters SEMI routine SEMI

   51 parameters: /* empty */
   52           | LP para_decl_list RP

   53 para_decl_list: para_type_list
   54               | para_type_list SEMI para_decl_list

   55 para_type_list: var_para_list COLON simple_type_decl
   56               | varE_para_list COLON simple_type_decl

   57 var_para_list: VAR name_list

   58 varE_para_list: name_list

   59 routine_body: compound_stmt

   60 compound_stmt: BEGINN stmt_list END

   61 stmt_list: /* empty */
   62          | stmt SEMI stmt_list

   63 stmt: non_label_stmt
   64     | INTEGER COLON non_label_stmt

   65 non_label_stmt: assign_stmt
   66               | proc_stmt
   67               | compound_stmt
   68               | if_stmt
   69               | repeat_stmt
   70               | while_stmt
   71               | for_stmt
   72               | case_stmt
   73               | goto_stmt

   74 assign_stmt: ID ASSIGN exp
   75            | ID LB exp RB ASSIGN exp
   76            | ID DOT ID ASSIGN exp

   77 proc_stmt: ID
   78          | ID LP args_list RP
   79          | SYS_PROC
   80          | SYS_PROC LP exp_list RP

   81 if_stmt: IF exp THEN stmt
   82        | IF exp THEN stmt ELSE stmt

   83 repeat_stmt: REPEAT stmt_list UNTIL exp

   84 while_stmt: WHILE exp DO stmt

   85 for_stmt: FOR ID ASSIGN exp TO exp DO stmt
   86         | FOR ID ASSIGN exp DOWNTO exp DO stmt

   87 case_stmt: CASE exp OF case_exp_list END

   88 case_exp_list: case_exp
   89              | case_exp case_exp_list

   90 case_exp: const_value COLON stmt SEMI
   91         | ID COLON stmt SEMI

   92 goto_stmt: GOTO INTEGER

   93 args_list: exp_list

   94 exp_list: exp
   95         | exp COMMA exp_list

   96 exp: lvalueExp
   97    | literalExp
   98    | arithmeticExp
   99    | comparisonExp
  100    | booleanExp
  101    | funcExp

  102 lvalueExp: lvalue

  103 lvalue: ID
  104       | LP exp RP
  105       | ID LB exp RB
  106       | ID DOT ID

  107 literalExp: const_value

  108 arithmeticExp: exp PLUS exp
  109              | exp MINUS exp
  110              | exp MOD exp
  111              | exp MUL exp
  112              | exp DIV exp
  113              | MINUS exp

  114 comparisonExp: exp EQUAL exp
  115              | exp UNEQUAL exp
  116              | exp GT exp
  117              | exp GE exp
  118              | exp LE exp
  119              | exp LT exp

  120 booleanExp: NOT exp
  121           | exp AND exp
  122           | exp OR exp

  123 funcExp: SYS_FUNCT LP args_list RP
  124        | ID LP args_list RP


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 1 9 19 24 29 37 49 50 74 75 76 77 78 85 86 91 103 105 106
    124
SYS_CON (259) 14
SYS_FUNCT (260) 123
SYS_PROC (261) 79 80
SYS_TYPE (262) 23
STRING (263) 13
INTEGER (264) 10 64 92
REAL (265) 11
CHAR (266) 12
COMMA (267) 36 95
COLON (268) 34 42 49 55 56 64 90 91
SEMI (269) 1 9 19 34 42 49 50 54 62 90 91
LP (270) 25 52 78 80 104 123 124
RP (271) 25 52 78 80 104 123 124
LB (272) 30 75 105
RB (273) 30 75 105
DOT (274) 1 76 106
DOTDOT (275) 26 27 28 29
PLUS (276) 108
MINUS (277) 27 28 109 113
MUL (278) 111
DIV (279) 112
MOD (280) 110
EQUEL (281)
UNEQUAL (282) 115
LT (283) 119
LE (284) 118
GT (285) 116
GE (286) 117
AND (287) 121
OR (288) 122
NOT (289) 120
ASSIGN (290) 74 75 76 85 86
ARRAY (291) 30
BEGINN (292) 60
CASE (293) 87
IF (294) 81 82
THEN (295) 81 82
ELSE (296) 82
WHILE (297) 84
FOR (298) 85 86
TO (299) 85
DOWNTO (300) 86
GOTO (301) 92
DO (302) 84 85 86
LET (303)
IN (304)
END (305) 31 60 87
OF (306) 30 87
WITH (307)
PACKED (308)
PROCEDURE (309) 50
PROGRAM (310) 1
RECORD (311) 31
REPEAT (312) 83
SET (313)
UNTIL (314) 83
BREAK (315)
FUNCTION (316) 49
VAR (317) 39 57
TYPE (318) 16
CONST (319) 6
LOWEST (320)
EQUAL (321) 9 19 114
UMINUS (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
program (69)
    on left: 1, on right: 0
routine (70)
    on left: 2, on right: 1 49 50
routine_head (71)
    on left: 3, on right: 2
label_part (72)
    on left: 4, on right: 3
const_part (73)
    on left: 5 6, on right: 3
const_expr_list (74)
    on left: 7 8, on right: 6 8
const_expr (75)
    on left: 9, on right: 7 8
const_value (76)
    on left: 10 11 12 13 14, on right: 9 90 107
type_part (77)
    on left: 15 16, on right: 3
type_decl_list (78)
    on left: 17 18, on right: 16 18
type_definition (79)
    on left: 19, on right: 17 18
type_decl (80)
    on left: 20 21 22, on right: 19 30 34 42
simple_type_decl (81)
    on left: 23 24 25 26 27 28 29, on right: 20 30 49 55 56
array_type_decl (82)
    on left: 30, on right: 21
record_type_decl (83)
    on left: 31, on right: 22
field_decl_list (84)
    on left: 32 33, on right: 31 33
field_decl (85)
    on left: 34, on right: 32 33
name_list (86)
    on left: 35 36, on right: 25 34 36 42 57 58
names (87)
    on left: 37, on right: 35 36
var_part (88)
    on left: 38 39, on right: 3
var_decl_list (89)
    on left: 40 41, on right: 39 41
var_decl (90)
    on left: 42, on right: 40 41
routine_part (91)
    on left: 43 44, on right: 3
routine_decl_list (92)
    on left: 45 46 47 48, on right: 44 47 48
function_decl (93)
    on left: 49, on right: 45 47
procedure_decl (94)
    on left: 50, on right: 46 48
parameters (95)
    on left: 51 52, on right: 49 50
para_decl_list (96)
    on left: 53 54, on right: 52 54
para_type_list (97)
    on left: 55 56, on right: 53 54
var_para_list (98)
    on left: 57, on right: 55
varE_para_list (99)
    on left: 58, on right: 56
routine_body (100)
    on left: 59, on right: 2
compound_stmt (101)
    on left: 60, on right: 59 67
stmt_list (102)
    on left: 61 62, on right: 60 62 83
stmt (103)
    on left: 63 64, on right: 62 81 82 84 85 86 90 91
non_label_stmt (104)
    on left: 65 66 67 68 69 70 71 72 73, on right: 63 64
assign_stmt (105)
    on left: 74 75 76, on right: 65
proc_stmt (106)
    on left: 77 78 79 80, on right: 66
if_stmt (107)
    on left: 81 82, on right: 68
repeat_stmt (108)
    on left: 83, on right: 69
while_stmt (109)
    on left: 84, on right: 70
for_stmt (110)
    on left: 85 86, on right: 71
case_stmt (111)
    on left: 87, on right: 72
case_exp_list (112)
    on left: 88 89, on right: 87 89
case_exp (113)
    on left: 90 91, on right: 88 89
goto_stmt (114)
    on left: 92, on right: 73
args_list (115)
    on left: 93, on right: 78 123 124
exp_list (116)
    on left: 94 95, on right: 80 93 95
exp (117)
    on left: 96 97 98 99 100 101, on right: 74 75 76 81 82 83 84 85
    86 87 94 95 104 105 108 109 110 111 112 113 114 115 116 117 118
    119 120 121 122
lvalueExp (118)
    on left: 102, on right: 96
lvalue (119)
    on left: 103 104 105 106, on right: 102
literalExp (120)
    on left: 107, on right: 26 27 28 97
arithmeticExp (121)
    on left: 108 109 110 111 112 113, on right: 98
comparisonExp (122)
    on left: 114 115 116 117 118 119, on right: 99
booleanExp (123)
    on left: 120 121 122, on right: 100
funcExp (124)
    on left: 123 124, on right: 101


state 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


state 1

    1 program: PROGRAM . ID SEMI routine DOT

    ID  shift, and go to state 3


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: PROGRAM ID . SEMI routine DOT

    SEMI  shift, and go to state 5


state 4

    0 $accept: program $end .

    $default  accept


state 5

    1 program: PROGRAM ID SEMI . routine DOT

    $default  reduce using rule 4 (label_part)

    routine       go to state 6
    routine_head  go to state 7
    label_part    go to state 8


state 6

    1 program: PROGRAM ID SEMI routine . DOT

    DOT  shift, and go to state 9


state 7

    2 routine: routine_head . routine_body

    BEGINN  shift, and go to state 10

    routine_body   go to state 11
    compound_stmt  go to state 12


state 8

    3 routine_head: label_part . const_part type_part var_part routine_part

    CONST  shift, and go to state 13

    $default  reduce using rule 5 (const_part)

    const_part  go to state 14


state 9

    1 program: PROGRAM ID SEMI routine DOT .

    $default  reduce using rule 1 (program)


state 10

   60 compound_stmt: BEGINN . stmt_list END

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    $default  reduce using rule 61 (stmt_list)

    compound_stmt   go to state 24
    stmt_list       go to state 25
    stmt            go to state 26
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 11

    2 routine: routine_head routine_body .

    $default  reduce using rule 2 (routine)


state 12

   59 routine_body: compound_stmt .

    $default  reduce using rule 59 (routine_body)


state 13

    6 const_part: CONST . const_expr_list

    ID  shift, and go to state 36

    const_expr_list  go to state 37
    const_expr       go to state 38


state 14

    3 routine_head: label_part const_part . type_part var_part routine_part

    TYPE  shift, and go to state 39

    $default  reduce using rule 15 (type_part)

    type_part  go to state 40


state 15

   74 assign_stmt: ID . ASSIGN exp
   75            | ID . LB exp RB ASSIGN exp
   76            | ID . DOT ID ASSIGN exp
   77 proc_stmt: ID .
   78          | ID . LP args_list RP

    LP      shift, and go to state 41
    LB      shift, and go to state 42
    DOT     shift, and go to state 43
    ASSIGN  shift, and go to state 44

    $default  reduce using rule 77 (proc_stmt)


state 16

   79 proc_stmt: SYS_PROC .
   80          | SYS_PROC . LP exp_list RP

    LP  shift, and go to state 45

    $default  reduce using rule 79 (proc_stmt)


state 17

   64 stmt: INTEGER . COLON non_label_stmt

    COLON  shift, and go to state 46


state 18

   87 case_stmt: CASE . exp OF case_exp_list END

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 58
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 19

   81 if_stmt: IF . exp THEN stmt
   82        | IF . exp THEN stmt ELSE stmt

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 66
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 20

   84 while_stmt: WHILE . exp DO stmt

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 67
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 21

   85 for_stmt: FOR . ID ASSIGN exp TO exp DO stmt
   86         | FOR . ID ASSIGN exp DOWNTO exp DO stmt

    ID  shift, and go to state 68


state 22

   92 goto_stmt: GOTO . INTEGER

    INTEGER  shift, and go to state 69


state 23

   83 repeat_stmt: REPEAT . stmt_list UNTIL exp

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    $default  reduce using rule 61 (stmt_list)

    compound_stmt   go to state 24
    stmt_list       go to state 70
    stmt            go to state 26
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 24

   67 non_label_stmt: compound_stmt .

    $default  reduce using rule 67 (non_label_stmt)


state 25

   60 compound_stmt: BEGINN stmt_list . END

    END  shift, and go to state 71


state 26

   62 stmt_list: stmt . SEMI stmt_list

    SEMI  shift, and go to state 72


state 27

   63 stmt: non_label_stmt .

    $default  reduce using rule 63 (stmt)


state 28

   65 non_label_stmt: assign_stmt .

    $default  reduce using rule 65 (non_label_stmt)


state 29

   66 non_label_stmt: proc_stmt .

    $default  reduce using rule 66 (non_label_stmt)


state 30

   68 non_label_stmt: if_stmt .

    $default  reduce using rule 68 (non_label_stmt)


state 31

   69 non_label_stmt: repeat_stmt .

    $default  reduce using rule 69 (non_label_stmt)


state 32

   70 non_label_stmt: while_stmt .

    $default  reduce using rule 70 (non_label_stmt)


state 33

   71 non_label_stmt: for_stmt .

    $default  reduce using rule 71 (non_label_stmt)


state 34

   72 non_label_stmt: case_stmt .

    $default  reduce using rule 72 (non_label_stmt)


state 35

   73 non_label_stmt: goto_stmt .

    $default  reduce using rule 73 (non_label_stmt)


state 36

    9 const_expr: ID . EQUAL const_value SEMI

    EQUAL  shift, and go to state 73


state 37

    6 const_part: CONST const_expr_list .

    $default  reduce using rule 6 (const_part)


state 38

    7 const_expr_list: const_expr .
    8                | const_expr . const_expr_list

    ID  shift, and go to state 36

    $default  reduce using rule 7 (const_expr_list)

    const_expr_list  go to state 74
    const_expr       go to state 38


state 39

   16 type_part: TYPE . type_decl_list

    ID  shift, and go to state 75

    type_decl_list   go to state 76
    type_definition  go to state 77


state 40

    3 routine_head: label_part const_part type_part . var_part routine_part

    VAR  shift, and go to state 78

    $default  reduce using rule 38 (var_part)

    var_part  go to state 79


state 41

   78 proc_stmt: ID LP . args_list RP

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    args_list      go to state 80
    exp_list       go to state 81
    exp            go to state 82
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 42

   75 assign_stmt: ID LB . exp RB ASSIGN exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 83
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 43

   76 assign_stmt: ID DOT . ID ASSIGN exp

    ID  shift, and go to state 84


state 44

   74 assign_stmt: ID ASSIGN . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 85
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 45

   80 proc_stmt: SYS_PROC LP . exp_list RP

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp_list       go to state 86
    exp            go to state 82
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 46

   64 stmt: INTEGER COLON . non_label_stmt

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    non_label_stmt  go to state 87
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 47

  103 lvalue: ID .
  105       | ID . LB exp RB
  106       | ID . DOT ID
  124 funcExp: ID . LP args_list RP

    LP   shift, and go to state 88
    LB   shift, and go to state 89
    DOT  shift, and go to state 90

    $default  reduce using rule 103 (lvalue)


state 48

   14 const_value: SYS_CON .

    $default  reduce using rule 14 (const_value)


state 49

  123 funcExp: SYS_FUNCT . LP args_list RP

    LP  shift, and go to state 91


state 50

   13 const_value: STRING .

    $default  reduce using rule 13 (const_value)


state 51

   10 const_value: INTEGER .

    $default  reduce using rule 10 (const_value)


state 52

   11 const_value: REAL .

    $default  reduce using rule 11 (const_value)


state 53

   12 const_value: CHAR .

    $default  reduce using rule 12 (const_value)


state 54

  104 lvalue: LP . exp RP

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 92
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 55

  113 arithmeticExp: MINUS . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 93
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 56

  120 booleanExp: NOT . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 94
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 57

  107 literalExp: const_value .

    $default  reduce using rule 107 (literalExp)


state 58

   87 case_stmt: CASE exp . OF case_exp_list END
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    OF       shift, and go to state 107
    EQUAL    shift, and go to state 108


state 59

   96 exp: lvalueExp .

    $default  reduce using rule 96 (exp)


state 60

  102 lvalueExp: lvalue .

    $default  reduce using rule 102 (lvalueExp)


state 61

   97 exp: literalExp .

    $default  reduce using rule 97 (exp)


state 62

   98 exp: arithmeticExp .

    $default  reduce using rule 98 (exp)


state 63

   99 exp: comparisonExp .

    $default  reduce using rule 99 (exp)


state 64

  100 exp: booleanExp .

    $default  reduce using rule 100 (exp)


state 65

  101 exp: funcExp .

    $default  reduce using rule 101 (exp)


state 66

   81 if_stmt: IF exp . THEN stmt
   82        | IF exp . THEN stmt ELSE stmt
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    THEN     shift, and go to state 109
    EQUAL    shift, and go to state 108


state 67

   84 while_stmt: WHILE exp . DO stmt
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    DO       shift, and go to state 110
    EQUAL    shift, and go to state 108


state 68

   85 for_stmt: FOR ID . ASSIGN exp TO exp DO stmt
   86         | FOR ID . ASSIGN exp DOWNTO exp DO stmt

    ASSIGN  shift, and go to state 111


state 69

   92 goto_stmt: GOTO INTEGER .

    $default  reduce using rule 92 (goto_stmt)


state 70

   83 repeat_stmt: REPEAT stmt_list . UNTIL exp

    UNTIL  shift, and go to state 112


state 71

   60 compound_stmt: BEGINN stmt_list END .

    $default  reduce using rule 60 (compound_stmt)


state 72

   62 stmt_list: stmt SEMI . stmt_list

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    $default  reduce using rule 61 (stmt_list)

    compound_stmt   go to state 24
    stmt_list       go to state 113
    stmt            go to state 26
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 73

    9 const_expr: ID EQUAL . const_value SEMI

    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53

    const_value  go to state 114


state 74

    8 const_expr_list: const_expr const_expr_list .

    $default  reduce using rule 8 (const_expr_list)


state 75

   19 type_definition: ID . EQUAL type_decl SEMI

    EQUAL  shift, and go to state 115


state 76

   16 type_part: TYPE type_decl_list .

    $default  reduce using rule 16 (type_part)


state 77

   17 type_decl_list: type_definition .
   18               | type_definition . type_decl_list

    ID  shift, and go to state 75

    $default  reduce using rule 17 (type_decl_list)

    type_decl_list   go to state 116
    type_definition  go to state 77


state 78

   39 var_part: VAR . var_decl_list

    ID  shift, and go to state 117

    name_list      go to state 118
    names          go to state 119
    var_decl_list  go to state 120
    var_decl       go to state 121


state 79

    3 routine_head: label_part const_part type_part var_part . routine_part

    PROCEDURE  shift, and go to state 122
    FUNCTION   shift, and go to state 123

    $default  reduce using rule 43 (routine_part)

    routine_part       go to state 124
    routine_decl_list  go to state 125
    function_decl      go to state 126
    procedure_decl     go to state 127


state 80

   78 proc_stmt: ID LP args_list . RP

    RP  shift, and go to state 128


state 81

   93 args_list: exp_list .

    $default  reduce using rule 93 (args_list)


state 82

   94 exp_list: exp .
   95         | exp . COMMA exp_list
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    COMMA    shift, and go to state 129
    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108

    $default  reduce using rule 94 (exp_list)


state 83

   75 assign_stmt: ID LB exp . RB ASSIGN exp
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    RB       shift, and go to state 130
    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108


state 84

   76 assign_stmt: ID DOT ID . ASSIGN exp

    ASSIGN  shift, and go to state 131


state 85

   74 assign_stmt: ID ASSIGN exp .
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108

    $default  reduce using rule 74 (assign_stmt)


state 86

   80 proc_stmt: SYS_PROC LP exp_list . RP

    RP  shift, and go to state 132


state 87

   64 stmt: INTEGER COLON non_label_stmt .

    $default  reduce using rule 64 (stmt)


state 88

  124 funcExp: ID LP . args_list RP

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    args_list      go to state 133
    exp_list       go to state 81
    exp            go to state 82
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 89

  105 lvalue: ID LB . exp RB

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 134
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 90

  106 lvalue: ID DOT . ID

    ID  shift, and go to state 135


state 91

  123 funcExp: SYS_FUNCT LP . args_list RP

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    args_list      go to state 136
    exp_list       go to state 81
    exp            go to state 82
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 92

  104 lvalue: LP exp . RP
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    RP       shift, and go to state 137
    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108


state 93

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  113              | MINUS exp .
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    $default  reduce using rule 113 (arithmeticExp)


state 94

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  120 booleanExp: NOT exp .
  121           | exp . AND exp
  122           | exp . OR exp

    $default  reduce using rule 120 (booleanExp)


state 95

  108 arithmeticExp: exp PLUS . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 138
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 96

  109 arithmeticExp: exp MINUS . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 139
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 97

  111 arithmeticExp: exp MUL . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 140
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 98

  112 arithmeticExp: exp DIV . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 141
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 99

  110 arithmeticExp: exp MOD . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 142
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 100

  115 comparisonExp: exp UNEQUAL . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 143
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 101

  119 comparisonExp: exp LT . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 144
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 102

  118 comparisonExp: exp LE . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 145
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 103

  116 comparisonExp: exp GT . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 146
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 104

  117 comparisonExp: exp GE . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 147
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 105

  121 booleanExp: exp AND . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 148
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 106

  122 booleanExp: exp OR . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 149
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 107

   87 case_stmt: CASE exp OF . case_exp_list END

    ID       shift, and go to state 150
    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53

    const_value    go to state 151
    case_exp_list  go to state 152
    case_exp       go to state 153


state 108

  114 comparisonExp: exp EQUAL . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 154
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 109

   81 if_stmt: IF exp THEN . stmt
   82        | IF exp THEN . stmt ELSE stmt

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 155
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 110

   84 while_stmt: WHILE exp DO . stmt

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 156
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 111

   85 for_stmt: FOR ID ASSIGN . exp TO exp DO stmt
   86         | FOR ID ASSIGN . exp DOWNTO exp DO stmt

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 157
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 112

   83 repeat_stmt: REPEAT stmt_list UNTIL . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 158
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 113

   62 stmt_list: stmt SEMI stmt_list .

    $default  reduce using rule 62 (stmt_list)


state 114

    9 const_expr: ID EQUAL const_value . SEMI

    SEMI  shift, and go to state 159


state 115

   19 type_definition: ID EQUAL . type_decl SEMI

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163
    ARRAY     shift, and go to state 164
    RECORD    shift, and go to state 165

    const_value       go to state 57
    type_decl         go to state 166
    simple_type_decl  go to state 167
    array_type_decl   go to state 168
    record_type_decl  go to state 169
    literalExp        go to state 170


state 116

   18 type_decl_list: type_definition type_decl_list .

    $default  reduce using rule 18 (type_decl_list)


state 117

   37 names: ID .

    $default  reduce using rule 37 (names)


state 118

   42 var_decl: name_list . COLON type_decl SEMI

    COLON  shift, and go to state 171


state 119

   35 name_list: names .
   36          | names . COMMA name_list

    COMMA  shift, and go to state 172

    $default  reduce using rule 35 (name_list)


state 120

   39 var_part: VAR var_decl_list .

    $default  reduce using rule 39 (var_part)


state 121

   40 var_decl_list: var_decl .
   41              | var_decl . var_decl_list

    ID  shift, and go to state 117

    $default  reduce using rule 40 (var_decl_list)

    name_list      go to state 118
    names          go to state 119
    var_decl_list  go to state 173
    var_decl       go to state 121


state 122

   50 procedure_decl: PROCEDURE . ID parameters SEMI routine SEMI

    ID  shift, and go to state 174


state 123

   49 function_decl: FUNCTION . ID parameters COLON simple_type_decl SEMI routine SEMI

    ID  shift, and go to state 175


state 124

    3 routine_head: label_part const_part type_part var_part routine_part .

    $default  reduce using rule 3 (routine_head)


state 125

   44 routine_part: routine_decl_list .

    $default  reduce using rule 44 (routine_part)


state 126

   45 routine_decl_list: function_decl .
   47                  | function_decl . routine_decl_list

    PROCEDURE  shift, and go to state 122
    FUNCTION   shift, and go to state 123

    $default  reduce using rule 45 (routine_decl_list)

    routine_decl_list  go to state 176
    function_decl      go to state 126
    procedure_decl     go to state 127


state 127

   46 routine_decl_list: procedure_decl .
   48                  | procedure_decl . routine_decl_list

    PROCEDURE  shift, and go to state 122
    FUNCTION   shift, and go to state 123

    $default  reduce using rule 46 (routine_decl_list)

    routine_decl_list  go to state 177
    function_decl      go to state 126
    procedure_decl     go to state 127


state 128

   78 proc_stmt: ID LP args_list RP .

    $default  reduce using rule 78 (proc_stmt)


state 129

   95 exp_list: exp COMMA . exp_list

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp_list       go to state 178
    exp            go to state 82
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 130

   75 assign_stmt: ID LB exp RB . ASSIGN exp

    ASSIGN  shift, and go to state 179


state 131

   76 assign_stmt: ID DOT ID ASSIGN . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 180
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 132

   80 proc_stmt: SYS_PROC LP exp_list RP .

    $default  reduce using rule 80 (proc_stmt)


state 133

  124 funcExp: ID LP args_list . RP

    RP  shift, and go to state 181


state 134

  105 lvalue: ID LB exp . RB
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    RB       shift, and go to state 182
    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108


state 135

  106 lvalue: ID DOT ID .

    $default  reduce using rule 106 (lvalue)


state 136

  123 funcExp: SYS_FUNCT LP args_list . RP

    RP  shift, and go to state 183


state 137

  104 lvalue: LP exp RP .

    $default  reduce using rule 104 (lvalue)


state 138

  108 arithmeticExp: exp . PLUS exp
  108              | exp PLUS exp .
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    MUL  shift, and go to state 97
    DIV  shift, and go to state 98
    MOD  shift, and go to state 99
    AND  shift, and go to state 105

    $default  reduce using rule 108 (arithmeticExp)


state 139

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  109              | exp MINUS exp .
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    MUL  shift, and go to state 97
    DIV  shift, and go to state 98
    MOD  shift, and go to state 99
    AND  shift, and go to state 105

    $default  reduce using rule 109 (arithmeticExp)


state 140

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  111              | exp MUL exp .
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    $default  reduce using rule 111 (arithmeticExp)


state 141

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  112              | exp DIV exp .
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    $default  reduce using rule 112 (arithmeticExp)


state 142

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  110              | exp MOD exp .
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    $default  reduce using rule 110 (arithmeticExp)


state 143

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  115              | exp UNEQUAL exp .
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS   shift, and go to state 95
    MINUS  shift, and go to state 96
    MUL    shift, and go to state 97
    DIV    shift, and go to state 98
    MOD    shift, and go to state 99
    AND    shift, and go to state 105
    OR     shift, and go to state 106

    UNEQUAL  error (nonassociative)
    LT       error (nonassociative)
    LE       error (nonassociative)
    GT       error (nonassociative)
    GE       error (nonassociative)
    EQUAL    error (nonassociative)

    $default  reduce using rule 115 (comparisonExp)


state 144

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  119              | exp LT exp .
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS   shift, and go to state 95
    MINUS  shift, and go to state 96
    MUL    shift, and go to state 97
    DIV    shift, and go to state 98
    MOD    shift, and go to state 99
    AND    shift, and go to state 105
    OR     shift, and go to state 106

    UNEQUAL  error (nonassociative)
    LT       error (nonassociative)
    LE       error (nonassociative)
    GT       error (nonassociative)
    GE       error (nonassociative)
    EQUAL    error (nonassociative)

    $default  reduce using rule 119 (comparisonExp)


state 145

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  118              | exp LE exp .
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS   shift, and go to state 95
    MINUS  shift, and go to state 96
    MUL    shift, and go to state 97
    DIV    shift, and go to state 98
    MOD    shift, and go to state 99
    AND    shift, and go to state 105
    OR     shift, and go to state 106

    UNEQUAL  error (nonassociative)
    LT       error (nonassociative)
    LE       error (nonassociative)
    GT       error (nonassociative)
    GE       error (nonassociative)
    EQUAL    error (nonassociative)

    $default  reduce using rule 118 (comparisonExp)


state 146

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  116              | exp GT exp .
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS   shift, and go to state 95
    MINUS  shift, and go to state 96
    MUL    shift, and go to state 97
    DIV    shift, and go to state 98
    MOD    shift, and go to state 99
    AND    shift, and go to state 105
    OR     shift, and go to state 106

    UNEQUAL  error (nonassociative)
    LT       error (nonassociative)
    LE       error (nonassociative)
    GT       error (nonassociative)
    GE       error (nonassociative)
    EQUAL    error (nonassociative)

    $default  reduce using rule 116 (comparisonExp)


state 147

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  117              | exp GE exp .
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS   shift, and go to state 95
    MINUS  shift, and go to state 96
    MUL    shift, and go to state 97
    DIV    shift, and go to state 98
    MOD    shift, and go to state 99
    AND    shift, and go to state 105
    OR     shift, and go to state 106

    UNEQUAL  error (nonassociative)
    LT       error (nonassociative)
    LE       error (nonassociative)
    GT       error (nonassociative)
    GE       error (nonassociative)
    EQUAL    error (nonassociative)

    $default  reduce using rule 117 (comparisonExp)


state 148

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  121           | exp AND exp .
  122           | exp . OR exp

    $default  reduce using rule 121 (booleanExp)


state 149

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp
  122           | exp OR exp .

    MUL  shift, and go to state 97
    DIV  shift, and go to state 98
    MOD  shift, and go to state 99
    AND  shift, and go to state 105

    $default  reduce using rule 122 (booleanExp)


state 150

   91 case_exp: ID . COLON stmt SEMI

    COLON  shift, and go to state 184


state 151

   90 case_exp: const_value . COLON stmt SEMI

    COLON  shift, and go to state 185


state 152

   87 case_stmt: CASE exp OF case_exp_list . END

    END  shift, and go to state 186


state 153

   88 case_exp_list: case_exp .
   89              | case_exp . case_exp_list

    ID       shift, and go to state 150
    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53

    $default  reduce using rule 88 (case_exp_list)

    const_value    go to state 151
    case_exp_list  go to state 187
    case_exp       go to state 153


state 154

  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  114              | exp EQUAL exp .
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS   shift, and go to state 95
    MINUS  shift, and go to state 96
    MUL    shift, and go to state 97
    DIV    shift, and go to state 98
    MOD    shift, and go to state 99
    AND    shift, and go to state 105
    OR     shift, and go to state 106

    UNEQUAL  error (nonassociative)
    LT       error (nonassociative)
    LE       error (nonassociative)
    GT       error (nonassociative)
    GE       error (nonassociative)
    EQUAL    error (nonassociative)

    $default  reduce using rule 114 (comparisonExp)


state 155

   81 if_stmt: IF exp THEN stmt .
   82        | IF exp THEN stmt . ELSE stmt

    ELSE  shift, and go to state 188

    $default  reduce using rule 81 (if_stmt)


state 156

   84 while_stmt: WHILE exp DO stmt .

    $default  reduce using rule 84 (while_stmt)


state 157

   85 for_stmt: FOR ID ASSIGN exp . TO exp DO stmt
   86         | FOR ID ASSIGN exp . DOWNTO exp DO stmt
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    TO       shift, and go to state 189
    DOWNTO   shift, and go to state 190
    EQUAL    shift, and go to state 108


state 158

   83 repeat_stmt: REPEAT stmt_list UNTIL exp .
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108

    $default  reduce using rule 83 (repeat_stmt)


state 159

    9 const_expr: ID EQUAL const_value SEMI .

    $default  reduce using rule 9 (const_expr)


state 160

   24 simple_type_decl: ID .
   29                 | ID . DOTDOT ID

    DOTDOT  shift, and go to state 191

    $default  reduce using rule 24 (simple_type_decl)


state 161

   23 simple_type_decl: SYS_TYPE .

    $default  reduce using rule 23 (simple_type_decl)


state 162

   25 simple_type_decl: LP . name_list RP

    ID  shift, and go to state 117

    name_list  go to state 192
    names      go to state 119


state 163

   27 simple_type_decl: MINUS . literalExp DOTDOT literalExp
   28                 | MINUS . literalExp DOTDOT MINUS literalExp

    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53

    const_value  go to state 57
    literalExp   go to state 193


state 164

   30 array_type_decl: ARRAY . LB simple_type_decl RB OF type_decl

    LB  shift, and go to state 194


state 165

   31 record_type_decl: RECORD . field_decl_list END

    ID  shift, and go to state 117

    field_decl_list  go to state 195
    field_decl       go to state 196
    name_list        go to state 197
    names            go to state 119


state 166

   19 type_definition: ID EQUAL type_decl . SEMI

    SEMI  shift, and go to state 198


state 167

   20 type_decl: simple_type_decl .

    $default  reduce using rule 20 (type_decl)


state 168

   21 type_decl: array_type_decl .

    $default  reduce using rule 21 (type_decl)


state 169

   22 type_decl: record_type_decl .

    $default  reduce using rule 22 (type_decl)


state 170

   26 simple_type_decl: literalExp . DOTDOT literalExp

    DOTDOT  shift, and go to state 199


state 171

   42 var_decl: name_list COLON . type_decl SEMI

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163
    ARRAY     shift, and go to state 164
    RECORD    shift, and go to state 165

    const_value       go to state 57
    type_decl         go to state 200
    simple_type_decl  go to state 167
    array_type_decl   go to state 168
    record_type_decl  go to state 169
    literalExp        go to state 170


state 172

   36 name_list: names COMMA . name_list

    ID  shift, and go to state 117

    name_list  go to state 201
    names      go to state 119


state 173

   41 var_decl_list: var_decl var_decl_list .

    $default  reduce using rule 41 (var_decl_list)


state 174

   50 procedure_decl: PROCEDURE ID . parameters SEMI routine SEMI

    LP  shift, and go to state 202

    $default  reduce using rule 51 (parameters)

    parameters  go to state 203


state 175

   49 function_decl: FUNCTION ID . parameters COLON simple_type_decl SEMI routine SEMI

    LP  shift, and go to state 202

    $default  reduce using rule 51 (parameters)

    parameters  go to state 204


state 176

   47 routine_decl_list: function_decl routine_decl_list .

    $default  reduce using rule 47 (routine_decl_list)


state 177

   48 routine_decl_list: procedure_decl routine_decl_list .

    $default  reduce using rule 48 (routine_decl_list)


state 178

   95 exp_list: exp COMMA exp_list .

    $default  reduce using rule 95 (exp_list)


state 179

   75 assign_stmt: ID LB exp RB ASSIGN . exp

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 205
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 180

   76 assign_stmt: ID DOT ID ASSIGN exp .
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108

    $default  reduce using rule 76 (assign_stmt)


state 181

  124 funcExp: ID LP args_list RP .

    $default  reduce using rule 124 (funcExp)


state 182

  105 lvalue: ID LB exp RB .

    $default  reduce using rule 105 (lvalue)


state 183

  123 funcExp: SYS_FUNCT LP args_list RP .

    $default  reduce using rule 123 (funcExp)


state 184

   91 case_exp: ID COLON . stmt SEMI

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 206
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 185

   90 case_exp: const_value COLON . stmt SEMI

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 207
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 186

   87 case_stmt: CASE exp OF case_exp_list END .

    $default  reduce using rule 87 (case_stmt)


state 187

   89 case_exp_list: case_exp case_exp_list .

    $default  reduce using rule 89 (case_exp_list)


state 188

   82 if_stmt: IF exp THEN stmt ELSE . stmt

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 208
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 189

   85 for_stmt: FOR ID ASSIGN exp TO . exp DO stmt

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 209
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 190

   86 for_stmt: FOR ID ASSIGN exp DOWNTO . exp DO stmt

    ID         shift, and go to state 47
    SYS_CON    shift, and go to state 48
    SYS_FUNCT  shift, and go to state 49
    STRING     shift, and go to state 50
    INTEGER    shift, and go to state 51
    REAL       shift, and go to state 52
    CHAR       shift, and go to state 53
    LP         shift, and go to state 54
    MINUS      shift, and go to state 55
    NOT        shift, and go to state 56

    const_value    go to state 57
    exp            go to state 210
    lvalueExp      go to state 59
    lvalue         go to state 60
    literalExp     go to state 61
    arithmeticExp  go to state 62
    comparisonExp  go to state 63
    booleanExp     go to state 64
    funcExp        go to state 65


state 191

   29 simple_type_decl: ID DOTDOT . ID

    ID  shift, and go to state 211


state 192

   25 simple_type_decl: LP name_list . RP

    RP  shift, and go to state 212


state 193

   27 simple_type_decl: MINUS literalExp . DOTDOT literalExp
   28                 | MINUS literalExp . DOTDOT MINUS literalExp

    DOTDOT  shift, and go to state 213


state 194

   30 array_type_decl: ARRAY LB . simple_type_decl RB OF type_decl

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163

    const_value       go to state 57
    simple_type_decl  go to state 214
    literalExp        go to state 170


state 195

   31 record_type_decl: RECORD field_decl_list . END

    END  shift, and go to state 215


state 196

   32 field_decl_list: field_decl .
   33                | field_decl . field_decl_list

    ID  shift, and go to state 117

    $default  reduce using rule 32 (field_decl_list)

    field_decl_list  go to state 216
    field_decl       go to state 196
    name_list        go to state 197
    names            go to state 119


state 197

   34 field_decl: name_list . COLON type_decl SEMI

    COLON  shift, and go to state 217


state 198

   19 type_definition: ID EQUAL type_decl SEMI .

    $default  reduce using rule 19 (type_definition)


state 199

   26 simple_type_decl: literalExp DOTDOT . literalExp

    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53

    const_value  go to state 57
    literalExp   go to state 218


state 200

   42 var_decl: name_list COLON type_decl . SEMI

    SEMI  shift, and go to state 219


state 201

   36 name_list: names COMMA name_list .

    $default  reduce using rule 36 (name_list)


state 202

   52 parameters: LP . para_decl_list RP

    ID   shift, and go to state 117
    VAR  shift, and go to state 220

    name_list       go to state 221
    names           go to state 119
    para_decl_list  go to state 222
    para_type_list  go to state 223
    var_para_list   go to state 224
    varE_para_list  go to state 225


state 203

   50 procedure_decl: PROCEDURE ID parameters . SEMI routine SEMI

    SEMI  shift, and go to state 226


state 204

   49 function_decl: FUNCTION ID parameters . COLON simple_type_decl SEMI routine SEMI

    COLON  shift, and go to state 227


state 205

   75 assign_stmt: ID LB exp RB ASSIGN exp .
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    EQUAL    shift, and go to state 108

    $default  reduce using rule 75 (assign_stmt)


state 206

   91 case_exp: ID COLON stmt . SEMI

    SEMI  shift, and go to state 228


state 207

   90 case_exp: const_value COLON stmt . SEMI

    SEMI  shift, and go to state 229


state 208

   82 if_stmt: IF exp THEN stmt ELSE stmt .

    $default  reduce using rule 82 (if_stmt)


state 209

   85 for_stmt: FOR ID ASSIGN exp TO exp . DO stmt
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    DO       shift, and go to state 230
    EQUAL    shift, and go to state 108


state 210

   86 for_stmt: FOR ID ASSIGN exp DOWNTO exp . DO stmt
  108 arithmeticExp: exp . PLUS exp
  109              | exp . MINUS exp
  110              | exp . MOD exp
  111              | exp . MUL exp
  112              | exp . DIV exp
  114 comparisonExp: exp . EQUAL exp
  115              | exp . UNEQUAL exp
  116              | exp . GT exp
  117              | exp . GE exp
  118              | exp . LE exp
  119              | exp . LT exp
  121 booleanExp: exp . AND exp
  122           | exp . OR exp

    PLUS     shift, and go to state 95
    MINUS    shift, and go to state 96
    MUL      shift, and go to state 97
    DIV      shift, and go to state 98
    MOD      shift, and go to state 99
    UNEQUAL  shift, and go to state 100
    LT       shift, and go to state 101
    LE       shift, and go to state 102
    GT       shift, and go to state 103
    GE       shift, and go to state 104
    AND      shift, and go to state 105
    OR       shift, and go to state 106
    DO       shift, and go to state 231
    EQUAL    shift, and go to state 108


state 211

   29 simple_type_decl: ID DOTDOT ID .

    $default  reduce using rule 29 (simple_type_decl)


state 212

   25 simple_type_decl: LP name_list RP .

    $default  reduce using rule 25 (simple_type_decl)


state 213

   27 simple_type_decl: MINUS literalExp DOTDOT . literalExp
   28                 | MINUS literalExp DOTDOT . MINUS literalExp

    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53
    MINUS    shift, and go to state 232

    const_value  go to state 57
    literalExp   go to state 233


state 214

   30 array_type_decl: ARRAY LB simple_type_decl . RB OF type_decl

    RB  shift, and go to state 234


state 215

   31 record_type_decl: RECORD field_decl_list END .

    $default  reduce using rule 31 (record_type_decl)


state 216

   33 field_decl_list: field_decl field_decl_list .

    $default  reduce using rule 33 (field_decl_list)


state 217

   34 field_decl: name_list COLON . type_decl SEMI

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163
    ARRAY     shift, and go to state 164
    RECORD    shift, and go to state 165

    const_value       go to state 57
    type_decl         go to state 235
    simple_type_decl  go to state 167
    array_type_decl   go to state 168
    record_type_decl  go to state 169
    literalExp        go to state 170


state 218

   26 simple_type_decl: literalExp DOTDOT literalExp .

    $default  reduce using rule 26 (simple_type_decl)


state 219

   42 var_decl: name_list COLON type_decl SEMI .

    $default  reduce using rule 42 (var_decl)


state 220

   57 var_para_list: VAR . name_list

    ID  shift, and go to state 117

    name_list  go to state 236
    names      go to state 119


state 221

   58 varE_para_list: name_list .

    $default  reduce using rule 58 (varE_para_list)


state 222

   52 parameters: LP para_decl_list . RP

    RP  shift, and go to state 237


state 223

   53 para_decl_list: para_type_list .
   54               | para_type_list . SEMI para_decl_list

    SEMI  shift, and go to state 238

    $default  reduce using rule 53 (para_decl_list)


state 224

   55 para_type_list: var_para_list . COLON simple_type_decl

    COLON  shift, and go to state 239


state 225

   56 para_type_list: varE_para_list . COLON simple_type_decl

    COLON  shift, and go to state 240


state 226

   50 procedure_decl: PROCEDURE ID parameters SEMI . routine SEMI

    $default  reduce using rule 4 (label_part)

    routine       go to state 241
    routine_head  go to state 7
    label_part    go to state 8


state 227

   49 function_decl: FUNCTION ID parameters COLON . simple_type_decl SEMI routine SEMI

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163

    const_value       go to state 57
    simple_type_decl  go to state 242
    literalExp        go to state 170


state 228

   91 case_exp: ID COLON stmt SEMI .

    $default  reduce using rule 91 (case_exp)


state 229

   90 case_exp: const_value COLON stmt SEMI .

    $default  reduce using rule 90 (case_exp)


state 230

   85 for_stmt: FOR ID ASSIGN exp TO exp DO . stmt

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 243
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 231

   86 for_stmt: FOR ID ASSIGN exp DOWNTO exp DO . stmt

    ID        shift, and go to state 15
    SYS_PROC  shift, and go to state 16
    INTEGER   shift, and go to state 17
    BEGINN    shift, and go to state 10
    CASE      shift, and go to state 18
    IF        shift, and go to state 19
    WHILE     shift, and go to state 20
    FOR       shift, and go to state 21
    GOTO      shift, and go to state 22
    REPEAT    shift, and go to state 23

    compound_stmt   go to state 24
    stmt            go to state 244
    non_label_stmt  go to state 27
    assign_stmt     go to state 28
    proc_stmt       go to state 29
    if_stmt         go to state 30
    repeat_stmt     go to state 31
    while_stmt      go to state 32
    for_stmt        go to state 33
    case_stmt       go to state 34
    goto_stmt       go to state 35


state 232

   28 simple_type_decl: MINUS literalExp DOTDOT MINUS . literalExp

    SYS_CON  shift, and go to state 48
    STRING   shift, and go to state 50
    INTEGER  shift, and go to state 51
    REAL     shift, and go to state 52
    CHAR     shift, and go to state 53

    const_value  go to state 57
    literalExp   go to state 245


state 233

   27 simple_type_decl: MINUS literalExp DOTDOT literalExp .

    $default  reduce using rule 27 (simple_type_decl)


state 234

   30 array_type_decl: ARRAY LB simple_type_decl RB . OF type_decl

    OF  shift, and go to state 246


state 235

   34 field_decl: name_list COLON type_decl . SEMI

    SEMI  shift, and go to state 247


state 236

   57 var_para_list: VAR name_list .

    $default  reduce using rule 57 (var_para_list)


state 237

   52 parameters: LP para_decl_list RP .

    $default  reduce using rule 52 (parameters)


state 238

   54 para_decl_list: para_type_list SEMI . para_decl_list

    ID   shift, and go to state 117
    VAR  shift, and go to state 220

    name_list       go to state 221
    names           go to state 119
    para_decl_list  go to state 248
    para_type_list  go to state 223
    var_para_list   go to state 224
    varE_para_list  go to state 225


state 239

   55 para_type_list: var_para_list COLON . simple_type_decl

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163

    const_value       go to state 57
    simple_type_decl  go to state 249
    literalExp        go to state 170


state 240

   56 para_type_list: varE_para_list COLON . simple_type_decl

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163

    const_value       go to state 57
    simple_type_decl  go to state 250
    literalExp        go to state 170


state 241

   50 procedure_decl: PROCEDURE ID parameters SEMI routine . SEMI

    SEMI  shift, and go to state 251


state 242

   49 function_decl: FUNCTION ID parameters COLON simple_type_decl . SEMI routine SEMI

    SEMI  shift, and go to state 252


state 243

   85 for_stmt: FOR ID ASSIGN exp TO exp DO stmt .

    $default  reduce using rule 85 (for_stmt)


state 244

   86 for_stmt: FOR ID ASSIGN exp DOWNTO exp DO stmt .

    $default  reduce using rule 86 (for_stmt)


state 245

   28 simple_type_decl: MINUS literalExp DOTDOT MINUS literalExp .

    $default  reduce using rule 28 (simple_type_decl)


state 246

   30 array_type_decl: ARRAY LB simple_type_decl RB OF . type_decl

    ID        shift, and go to state 160
    SYS_CON   shift, and go to state 48
    SYS_TYPE  shift, and go to state 161
    STRING    shift, and go to state 50
    INTEGER   shift, and go to state 51
    REAL      shift, and go to state 52
    CHAR      shift, and go to state 53
    LP        shift, and go to state 162
    MINUS     shift, and go to state 163
    ARRAY     shift, and go to state 164
    RECORD    shift, and go to state 165

    const_value       go to state 57
    type_decl         go to state 253
    simple_type_decl  go to state 167
    array_type_decl   go to state 168
    record_type_decl  go to state 169
    literalExp        go to state 170


state 247

   34 field_decl: name_list COLON type_decl SEMI .

    $default  reduce using rule 34 (field_decl)


state 248

   54 para_decl_list: para_type_list SEMI para_decl_list .

    $default  reduce using rule 54 (para_decl_list)


state 249

   55 para_type_list: var_para_list COLON simple_type_decl .

    $default  reduce using rule 55 (para_type_list)


state 250

   56 para_type_list: varE_para_list COLON simple_type_decl .

    $default  reduce using rule 56 (para_type_list)


state 251

   50 procedure_decl: PROCEDURE ID parameters SEMI routine SEMI .

    $default  reduce using rule 50 (procedure_decl)


state 252

   49 function_decl: FUNCTION ID parameters COLON simple_type_decl SEMI . routine SEMI

    $default  reduce using rule 4 (label_part)

    routine       go to state 254
    routine_head  go to state 7
    label_part    go to state 8


state 253

   30 array_type_decl: ARRAY LB simple_type_decl RB OF type_decl .

    $default  reduce using rule 30 (array_type_decl)


state 254

   49 function_decl: FUNCTION ID parameters COLON simple_type_decl SEMI routine . SEMI

    SEMI  shift, and go to state 255


state 255

   49 function_decl: FUNCTION ID parameters COLON simple_type_decl SEMI routine SEMI .

    $default  reduce using rule 49 (function_decl)
